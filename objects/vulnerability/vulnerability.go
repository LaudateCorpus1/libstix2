// Copyright 2015-2019 Bret Jordan, All rights reserved.
//
// Use of this source code is governed by an Apache 2.0 license that can be
// found in the LICENSE file in the root of the source tree.

package vulnerability

import (
	"encoding/json"

	"github.com/freetaxii/libstix2/objects/baseobject"
	"github.com/freetaxii/libstix2/objects/properties"
)

// ----------------------------------------------------------------------
//
// Define Object Type
//
// ----------------------------------------------------------------------

/*
Vulnerability - This type implements the STIX 2 Vulnerability SDO and defines
all of the properties methods needed to create and work with the STIX Vulnerability
SDO. All of the methods not defined local to this type are inherited from
the individual properties.

The following information comes directly from the STIX 2 specificaton documents.

A Vulnerability is "a mistake in software that can be directly used by a hacker
to gain access to a system or network" [CVE]. For example, if a piece of malware
exploits CVE-2015-12345, a Malware object could be linked to a Vulnerability
object that references CVE-2015-12345.

The Vulnerability SDO is primarily used to link to external definitions of
vulnerabilities or to describe 0-day vulnerabilities that do not yet have an
external definition. Typically, other SDOs assert relationships to Vulnerability
objects when a specific vulnerability is targeted and exploited as part of
malicious cyber activity. As such, Vulnerability objects can be used as a
linkage to the asset management and compliance process.
*/
type Vulnerability struct {
	baseobject.CommonObjectProperties
	properties.NameProperty
	properties.DescriptionProperty
}

// ----------------------------------------------------------------------
//
// Initialization Functions
//
// ----------------------------------------------------------------------

/*
New - This function will create a new STIX Vulnerability object and return it as
a pointer.
*/
func New() *Vulnerability {
	var obj Vulnerability
	obj.InitObject("vulnerability")
	return &obj
}

// ----------------------------------------------------------------------
// Public Methods - Vulnerability - Core Functionality
// ----------------------------------------------------------------------

/*
Decode - This function will decode some JSON data encoded as a slice of bytes
into an actual struct. It will return the object as a pointer and any errors found.
*/
func Decode(data []byte) (*Vulnerability, error) {
	var o Vulnerability
	err := json.Unmarshal(data, &o)
	if err != nil {
		return nil, err
	}

	if valid, err := o.Valid(); valid != true {
		return nil, err
	}

	o.SetRawData(data)
	return &o, nil
}

/*
Encode - This method is a simple wrapper for encoding an object in to JSON
*/
func (o *Vulnerability) Encode() ([]byte, error) {
	data, err := json.MarshalIndent(o, "", "    ")
	if err != nil {
		return nil, err
	}
	return data, nil
}

/*
EncodeToString - This method is a simple wrapper for encoding an object in to JSON
*/
func (o *Vulnerability) EncodeToString() (string, error) {
	data, err := json.MarshalIndent(o, "", "    ")
	if err != nil {
		return "", err
	}
	return string(data), nil
}

/*
Valid - This method will verify all of the properties on the object.
*/
func (o *Vulnerability) Valid() (bool, error) {

	// Check common base properties first
	if valid, err := o.CommonObjectProperties.Valid(); valid != true {
		return false, err
	}

	return true, nil
}

// ----------------------------------------------------------------------
// Public Methods - Vulnerability
// ----------------------------------------------------------------------
